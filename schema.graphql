type Block @entity {
  "A mined Ethereum Block with references to Skale Network related updates"
  id: ID! # block hash
  number: BigInt!
  timestamp: BigInt!
  validators: [Validator!]! @derivedFrom(field: "registeredBlock")
  nodes: [Node!]! @derivedFrom(field: "startBlock")
  delegations: [Delegation!]! @derivedFrom(field: "delegatedBlock")
  schains: [Schain!]! @derivedFrom(field: "createdBlock")
}

type ValidatorMeta @entity {
  "Statistics for all validators"
  id: ID!
  currentCount: BigInt!
}

type Validator @entity {
  "Single validator"
  id: ID! # on chain validatorId
  name: String!
  address: Bytes!
  requestedAddress: Bytes!
  description: String
  feeRate: BigInt!
  registrationTime: BigInt!
  minimumDelegationAmount: BigInt!
  acceptNewRequests: Boolean!
  isEnabled: Boolean!
  registeredBlock: Block!
  nodeAddresses: [NodeAddress!]! @derivedFrom(field: "validator")
  nodes: [Node!]! @derivedFrom(field: "validator")
  delegations: [Delegation!]! @derivedFrom(field: "validator")
  currentDelegationCount: BigInt!
  currentDelegationAmount: BigInt!
  claimedFee: BigInt!
}

type NodeAddress @entity {
  "Mapping of address to node"
  id: ID! # address
  node: Node @derivedFrom(field: "address")
  validator: Validator
}

type Node @entity {
  "Single node"
  id: ID! # contract nodeId
  name: String!
  ip: Bytes!
  publicIP: Bytes!
  port:  BigInt!
  address: NodeAddress
  startBlock: Block!
  lastRewardDate: BigInt!
  status: String!
  validator: Validator
  schains: [SchainNode!] @derivedFom(field: "node")
}

type Delegator @entity {
  "Statistics for a single Delegator"
  id: ID! # address
  delegations: [Delegation!]! @derivedFrom(field: "holder")
  currentCount: BigInt!
  currentAmount: BigInt!
  claimedBounty: BigInt!
}

type DelegationMeta @entity {
  "Statistics for all Delegators"
  id: ID!
  currentCount: BigInt!
  currentAmount: BigInt!
}

type Delegation @entity {
  "Single Delegation"
  id: ID! # contract delegationId 
  state: String!
  holder: Delegator!
  validator: Validator!
  amount: BigInt!
  delegationPeriod: BigInt!
  created: BigInt!
  started: BigInt!
  finished: BigInt!
  info: String!
  delegatedBlock: Block!
}

type SchainMeta @entity {
  "Statistics for all Skale Chains"
  id: ID!
  currentCount: BigInt!
}

type SchainOwner @entity {
  "Statistics for individual Skale Chain owners"
  id: ID! # address
  currentSchainCount: BigInt!
}

type SchainNode @entity {
  "Mapping of Skale Chain to Node"
  id: ID! # schain.id + node.id
  schain: Schain!
  node: Node!
}

type Schain @entity {
  "Single Schain"
  id: ID! # contract schainId
  owner: SchainOwner!
  name: String!
  partOfNode: BigInt!
  lifetime: BigInt!
  deposit: BigInt!
  nonce: Int!
  createdBlock: Block!
  nodesCount: BigInt!
  nodes: [SchainNode!]! @derivedFom(field: "schain")
}
