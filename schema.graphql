type Block @entity {
  id: ID!
  hash: String!
  number: BigInt!
  timestamp: BigInt!
  validators: [Validator!]! @derivedFrom(field: "registeredBlock")
  nodes: [Node!]! @derivedFrom(field: "startBlock")
  delegations: [Delegation!]! @derivedFrom(field: "delegatedBlock")
}

type Validator @entity {
  id: ID!
  name: String!
  address: Bytes!
  requestedAddress: Bytes!
  description: String
  feeRate: BigInt!
  registrationTime: BigInt!
  minimumDelegationAmount: BigInt!
  acceptNewRequests: Boolean!
  isEnabled: Boolean!
  registeredBlock: Block!
  nodeAddresses: [NodeAddress!]! @derivedFrom(field: "validator")
  nodes: [Node!]! @derivedFrom(field: "validator")
  delegations: [Delegation!] @derivedFom(field: "validator")
}

type NodeAddress @entity {
  id: ID!
  node: Node @derivedFrom(field: "address")
  validator: Validator
}

type ValidatorMeta @entity {
  id: ID!
  count: BigInt!
}

type Node @entity {
  id: ID!
  name: String!
  ip: Bytes!
  publicIP: Bytes!
  port:  BigInt!
  address: NodeAddress
  startBlock: Block!
  lastRewardDate: BigInt!
  status: String!
  validator: Validator
}

type Delegator @entity {
  id: ID!
  delegations: Delegation @derivedFrom(field: "holder")
}

type DelegationMeta @entity {
  id: ID!
  count: BigInt!
  delegatorCount: BigInt!
}

type Delegation @entity {
  id: ID!
  state: String!
  holder: Delegator!
  validator: Validator!
  amount: BigInt!
  delegationPeriod: BigInt!
  created: BigInt!
  started: BigInt!
  finished: BigInt!
  info: String!
  delegatedBlock: Block!
}
